{"version":3,"file":"static/js/802.96c8f4ee.chunk.js","mappings":"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","sources":["components/Services/FetchAPI.jsx","components/SearchList/SearchList.styled.jsx","components/SearchList/SearchList.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","views/MoviesView.jsx","hooks/useSearchMovie.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst key = 'fbc76dc8ab4d0da433d9be06ec2fd63f';\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w300';\n\nexport const fetchAPI = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${key}`);\n  return response.data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(`/movie/${id}?api_key=${key}`);\n  return response.data;\n};\n\nexport const fetchCastList = async id => {\n  const respose = await axios.get(`/movie/${id}/credits?api_key=${key}`);\n  return respose.data.cast;\n};\n\nexport const fetchReviewsById = async id => {\n  const respose = await axios.get(`/movie/${id}/reviews?api_key=${key}&page=1`);\n  return respose.data.results;\n};\n\nexport const fetchSearchMovie = async query => {\n  const respose = await axios.get(`/search/movie?api_key=${key}&query=${query}`);\n  return respose.data.results;\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\nexport const Item = styled(Link)`\n  display: flex;\n  flex-basis: 48%;\n  margin-bottom: 15px;\n  cursor: pointer;\n  text-decoration: none;\n  color: #000000;\n  transition-property: background-color, color;\n  transition-duration: 500ms;\n  :hover {\n    background-color: #000000;\n    color: #ffffffff;\n  }\n`;\n\nexport const Img = styled.img`\n  margin-right: 15px;\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 20px;\n`;\nexport const ReleaseData = styled.p`\n  font-size: 22px;\n  margin-bottom: 30px;\n`;\n\nexport const Overview = styled.p`\n  font-size: 20px;\n`;\n\nexport const Wrapper = styled.div`\n    padding: 10px;\n`","import { IMG_URL } from 'components/Services/FetchAPI';\nimport {\n  Item,\n  Img,\n  Title,\n  Overview,\n  ReleaseData,\n  Container,\n  Wrapper\n} from './SearchList.styled';\n\nexport const SearchList = ({ posts }) => {\n  return (\n    <Container>\n      {posts.map(({ id, title, poster_path, overview, release_date }) => (\n        <Item key={id} to={`${id}`}>\n          <Img\n            src={\n              poster_path\n                ? `${IMG_URL}${poster_path}`\n                : 'https://image.shutterstock.com/image-vector/default-avatar-profile-social-media-260nw-1920331226.jpg'\n            }\n            alt={title}\n          />\n          <Wrapper>\n            <Title>{title}</Title>\n            <ReleaseData>{release_date}</ReleaseData>\n            <Overview>{overview}</Overview>\n          </Wrapper>\n        </Item>\n      ))}\n    </Container>\n  );\n};\n","import styled from \"styled-components\";\n\n\nexport const SearchWrapper = styled.div`\n    display: flex;\n    padding-top: 80px;\n    margin-bottom: 30px;\n`\nexport const Input = styled.input`\n    width: 300px;\n    height: 35px;\n    font-size: 22px;\n`\n\nexport const Button = styled.button`\n    width: 100px;\n    height: 35px;\n    color: #ffffff;\n    background-color: #3b4157;\n    font-size: 22px;\n    outline: none;\n    border: none;\n`\n\nexport const Form = styled.form`\ndisplay: flex;\nalign-items: center;\n`","import { SearchWrapper, Input, Button, Form } from './SearchForm.styled';\nimport { useState } from 'react';\n\nexport const SearchFomr = ({onSubmit, postQuery, }) => {\n  const [search, setSearch] = useState(postQuery)\n  \n  return (\n    <SearchWrapper>\n      <Form autoComplete=\"off\" onSubmit={onSubmit}> \n        <Input type=\"search\" name=\"search\"\n        value={search ? search: ''} onChange={e => {setSearch(e.target.value)}}\n        placeholder=\"Search movies\" />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n    </SearchWrapper>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { SearchList } from 'components/SearchList/SearchList';\nimport { SearchFomr } from 'components/SearchForm/SearchForm';\nimport { useSearchMovie } from 'hooks/useSearchMovie';\n\n\n const MoviesView = () => {\nconst {postQuery, posts, handSubmit} = useSearchMovie()\n  return (\n    <>\n      <SearchFomr onSubmit={handSubmit} postQuery={postQuery} />\n      <SearchList posts={posts} />\n      <Outlet />\n    </>\n  );\n};\n\nexport default MoviesView","import { useState, useEffect } from \"react\";\nimport { fetchSearchMovie } from 'components/Services/FetchAPI';\nimport { useSearchParams } from 'react-router-dom';\n\nexport const useSearchMovie = ()=>{\n    const [posts, setPost] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const postQuery = searchParams.get('query');\n  \n    useEffect(() => {\n      if (postQuery) {\n        fetchSearchMovie(postQuery).then(data => setPost(data));\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [searchParams]);\n  \n    const handSubmit = e => {\n      e.preventDefault();\n      const query = e.target.search.value;\n      setSearchParams({ query: query });\n    };\n\n    return {posts, postQuery, handSubmit}\n}"],"names":["axios","key","IMG_URL","fetchAPI","response","data","results","fetchMovieById","id","fetchCastList","respose","cast","fetchReviewsById","fetchSearchMovie","query","Container","styled","Item","Link","Img","Title","ReleaseData","Overview","Wrapper","SearchList","posts","map","title","poster_path","overview","release_date","to","src","alt","SearchWrapper","Input","Button","Form","SearchFomr","onSubmit","postQuery","useState","search","setSearch","autoComplete","type","name","value","onChange","e","target","placeholder","setPost","useSearchParams","searchParams","setSearchParams","get","useEffect","then","handSubmit","preventDefault","useSearchMovie"],"sourceRoot":""}